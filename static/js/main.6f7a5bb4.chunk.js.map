{"version":3,"sources":["redux/actions/action.js","pages/Login.js","pages/Settings.js","helper/localStorageHelper.js","pages/Ranking.js","components/Header.jsx","pages/FeedBack.js","helper/randomQuestion.js","components/GameBody.jsx","pages/Game.js","App.js","serviceWorker.js","redux/reducers/player.js","redux/reducers/token.js","redux/reducers/rootReducers.js","redux/store/store.js","index.js","trivia.png"],"names":["correctAnswer","score","type","payload","Login","state","gravatarEmail","name","onInputChange","target","id","value","setState","isDisabled","onClickButton","a","props","history","addUserInfo","getTokenDispatch","fetch","fToken","json","token","push","this","className","src","logo","alt","htmlFor","data-testid","onChange","placeholder","autoComplete","required","ss","disabled","onClick","Component","connect","dispatch","convertHash","md5","toString","getUserInfo","Settings","setLocalStorage","newScore","oldStorage","JSON","parse","localStorage","getItem","setItem","stringify","Ranking","getRanked","sort","b","map","index","key","Header","player","FeedBack","assertions","randomQuestion","correct","wrong","wrongAnswer","element","random","Math","GameBody","answer","disableQuestButton","timer","intervalo","questionsRandom","componentDidMount","questions","corrAnswer","correct_answer","incorrectAnswers","incorrect_answers","countDown","onClickAnswer","answerClick","clearInterval","difficultyBonus","difficulty","document","querySelector","incorrect","querySelectorAll","forEach","onClickNext","setInterval","prevState","nextButton","category","question","randomAnswer","sanitize","length","currentQuestion","testId","split","Game","getQuestion","results","getNewFetch","getToken","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","rootReducers","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6f7a5bb4.chunk.js","sourcesContent":["import md5 from 'crypto-js/md5';\n\nexport const GET_USER_INFO = 'GET_USER_INFO';\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const CORRECT_ANSWER = 'CORRECT_ANSWER';\n\nexport const getToken = (state) => ({ type: GET_TOKEN, payload: state });\nexport const correctAnswer = (score) => ({ type: CORRECT_ANSWER, payload: score });\n\nexport const getUserInfo = (state) => {\n  const convertHash = md5(state.gravatarEmail).toString();\n  const url = (hash) => `https://www.gravatar.com/avatar/${hash}`;\n  state.gravatarEmail = url(convertHash);\n  return { type: GET_USER_INFO, payload: state };\n};\n","/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react/jsx-max-depth */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { BsPlay } from 'react-icons/bs';\nimport { getUserInfo, getToken } from '../redux/actions/action';\nimport logo from '../trivia.png';\nimport '../style/Login.css';\n\nclass Login extends Component {\n  state = {\n    gravatarEmail: '',\n    name: '',\n  }\n\n  onInputChange = ({ target: { id, value } }) => this.setState({ [id]: value });\n\n  isDisabled = (gravatarEmail, name) => {\n    if (gravatarEmail === '' || name === '') {\n      return true;\n    } return false;\n  }\n\n  onClickButton = async () => {\n    const { history, addUserInfo, getTokenDispatch } = this.props;\n    const fToken = await fetch('https://opentdb.com/api_token.php?command=request');\n    const { token } = await fToken.json();\n    getTokenDispatch(token);\n    addUserInfo({ ...this.state });\n    history.push('/game');\n  }\n\n  render() {\n    const { gravatarEmail, name } = this.state;\n    return (\n      <section className=\"login_section\">\n        <div className=\"login_wrapper\">\n          <div className=\"login_logo_wrapper\">\n            <img src={ logo } alt=\"trivia logo in black and white\" />\n          </div>\n          <div className=\"login_form_wrapper\">\n            <label htmlFor=\"name\">\n              <input\n                id=\"name\"\n                data-testid=\"input-player-name\"\n                type=\"text\"\n                value={ name }\n                onChange={ this.onInputChange }\n                placeholder=\"Name\"\n                autoComplete=\"off\"\n                required\n              />\n            </label>\n            <label htmlFor=\"gravatarEmail\">\n              <input\n                id=\"gravatarEmail\"\n                data-testid=\"input-gravatar-email\"\n                ss\n                type=\"email\"\n                value={ gravatarEmail }\n                onChange={ this.onInputChange }\n                placeholder=\"Email\"\n                autoComplete=\"off\"\n                required\n              />\n            </label>\n            <div className=\"login_btn_wrapper\">\n              <button\n                id=\"userSubmit\"\n                className=\"form_btn\"\n                data-testid=\"btn-play\"\n                type=\"button\"\n                disabled={ this.isDisabled(gravatarEmail, name) }\n                alt=\"Let's Play!\"\n                onClick={ this.onClickButton }\n              >\n                <BsPlay />\n                <span\n                  className=\"form_btn_text\"\n                >\n                  Let's Play!\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nLogin.propTypes = {\n  addUserInfo: PropTypes.func.isRequired,\n  getTokenDispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addUserInfo: (value) => dispatch(getUserInfo(value)),\n  getTokenDispatch: (token) => dispatch(getToken(token)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">Configurações de Jogo</h1>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","export const getLocalStorage = () => JSON.parse(localStorage.getItem('ranking'));\n\nexport const setLocalStorage = (newScore) => {\n  const oldStorage = JSON.parse(localStorage.getItem('ranking'));\n  if (!oldStorage) return localStorage.setItem('ranking', JSON.stringify([newScore]));\n  return localStorage.setItem('ranking', JSON.stringify([...oldStorage, newScore]));\n};\n","/* eslint-disable react/jsx-max-depth */\nimport React, { Component } from 'react';\nimport { IoHome, IoMedalOutline } from 'react-icons/io5';\nimport PropTypes from 'prop-types';\nimport { getLocalStorage } from '../helper/localStorageHelper';\nimport '../style/Ranking.css';\n\nclass Ranking extends Component {\n  render() {\n    const getRanked = getLocalStorage()\n      .sort((a, b) => b.score - a.score);\n    const { history } = this.props;\n    return (\n      <>\n        <div className=\"pyro\">\n          <div className=\"before\" />\n          <div className=\"after\" />\n        </div>\n        <div>\n          <div className=\"ranking_wrapper\">\n            <h1 data-testid=\"ranking-title\">\n              <IoMedalOutline className=\"ranking_icon_medal\" />\n              Top Players!\n            </h1>\n            <div className=\"ranking_boxlist\">\n              <ol className=\"ranking_ol\">\n                {getRanked.map(({ name, score, gravatarEmail }, index) => (\n                  <li\n                    className=\"ranking_li\"\n                    key={ index }\n                  >\n                    <p>{`#${index + 1}`}</p>\n                    <div className=\"ranking_player_wrapper\">\n                      <img src={ gravatarEmail } alt={ name } />\n                      <p data-testid={ `player-name-${index}` }>{name}</p>\n                    </div>\n                    <p\n                      data-testid={ `player-score-${index}` }\n                    >\n                      {`Greatest Score: ${score}`}\n\n                    </p>\n                  </li>\n                ))}\n              </ol>\n            </div>\n            <div className=\"ranking_home_btn\">\n              <button\n                className=\"ranking_btn\"\n                type=\"button\"\n                data-testid=\"btn-go-home\"\n                onClick={ () => {\n                  history.push('/');\n                } }\n              >\n                <IoHome />\n                <span className=\"ranking_btn_text\">Go Home!</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n      </>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Ranking;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../style/Header.css';\nimport logo from '../trivia.png';\n\nclass Header extends Component {\n  render() {\n    const { name, score, gravatarEmail } = this.props;\n    return (\n      <header className=\"header_main_wrapper\">\n        <div className=\"header_wrapper\">\n          <div className=\"header_logo\">\n            <img src={ logo } alt=\"trivia logo in black and white\" />\n          </div>\n          <div className=\"header_score\">\n            <span data-testid=\"header-score\">{ `Your score is: ${score} points`}</span>\n          </div>\n          <div className=\"header_username\">\n            <img\n              src={ gravatarEmail }\n              alt={ name }\n              data-testid=\"header-profile-picture\"\n            />\n            <span data-testid=\"header-player-name\">{name}</span>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({ player }) => ({\n  name: player.name,\n  score: player.score,\n  gravatarEmail: player.gravatarEmail,\n});\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { BiRecycle } from 'react-icons/bi';\nimport { IoMedalOutline } from 'react-icons/io5';\nimport Header from '../components/Header';\nimport '../style/Feedback.css';\n\nclass FeedBack extends Component {\n  render() {\n    const { assertions, score, history } = this.props;\n    const MINIMUM_ASSERTIONS = 3;\n    return (\n      <div>\n        <Header />\n        <div className=\"feedback_wrapper\">\n          <h1 data-testid=\"feedback-text\">\n            { assertions < MINIMUM_ASSERTIONS\n              ? 'Could be better...'\n              : 'Well Done!'}\n          </h1>\n          <p>\n            You got\n            {' '}\n            <span data-testid=\"feedback-total-question\">{ assertions }</span>\n            {' '}\n            questions right\n          </p>\n          <p>\n            Making\n            {' '}\n            <span data-testid=\"feedback-total-score\">{score}</span>\n            {' '}\n            points\n          </p>\n\n          <div className=\"feedback_btn\">\n\n            <button\n              className=\"feedback_config_btn\"\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              onClick={ () => history.push('/') }\n            >\n              <BiRecycle />\n              <span className=\"feedback_btn_text\">Restart</span>\n            </button>\n\n            <button\n              className=\"feedback_config_btn\"\n              type=\"button\"\n              data-testid=\"btn-ranking\"\n              onClick={ () => history.push('/ranking') }\n            >\n              <IoMedalOutline />\n              <span className=\"feedback_btn_text\">Ranking</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ player }) => ({\n  assertions: player.assertions,\n  score: player.score,\n});\n\nFeedBack.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps)(FeedBack);\n","const randomQuestion = (type, correct, wrong) => {\n  const CORRECT_ANSWER = 'correct-answer';\n  if (type === 'boolean') {\n    if (correct === 'True') {\n      return [['True', CORRECT_ANSWER], ['False', 'wrong-answer-0']];\n    } return [['True', 'wrong-answer-0'], ['False', CORRECT_ANSWER]];\n  } const correctAnswer = [correct, CORRECT_ANSWER];\n  const wrongAnswer = wrong.map((element, index) => [element, `wrong-answer-${index}`]);\n  const random = [correctAnswer, ...wrongAnswer];\n  const halfNumber = 0.5;\n  return random.sort(() => Math.random() - halfNumber);\n};\n\nexport default randomQuestion;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport sanitize from 'sanitize-html';\nimport PropTypes from 'prop-types';\nimport { BiTimer, BiSkipNextCircle } from 'react-icons/bi';\nimport { correctAnswer } from '../redux/actions/action';\nimport randomQuestion from '../helper/randomQuestion';\nimport { setLocalStorage } from '../helper/localStorageHelper';\nimport '../style/GameBody.css';\n\nclass GameBody extends Component {\n  state = {\n    answer: 0,\n    disableQuestButton: false,\n    timer: 30,\n    intervalo: '',\n    questionsRandom: [],\n  }\n\n  componentDidMount = () => {\n    const { questions } = this.props;\n    const questionsRandom = questions.map(({ type,\n      correct_answer: corrAnswer,\n      incorrect_answers: incorrectAnswers,\n    }) => randomQuestion(type, corrAnswer, incorrectAnswers));\n    this.setState({ questionsRandom });\n    this.countDown();\n  }\n\n  onClickAnswer = (answerClick) => {\n    const { intervalo, answer, timer } = this.state;\n    clearInterval(intervalo);\n    const { dispatch, questions } = this.props;\n    if (answerClick === 'correct-answer') {\n      let difficultyBonus;\n      const MAXIMUS_BONUS = 3;\n      switch (questions[answer].difficulty) {\n      case 'easy':\n        difficultyBonus = 1;\n        break;\n      case 'medium':\n        difficultyBonus = 2;\n        break;\n      case 'hard':\n        difficultyBonus = MAXIMUS_BONUS;\n        break;\n      default:\n        break;\n      }\n      const MINIMUM_SCORE = 10;\n      const score = MINIMUM_SCORE + (difficultyBonus * timer);\n      dispatch(correctAnswer(score));\n    }\n    this.setState({ disableQuestButton: true });\n\n    const correct = document.querySelector('.correct');\n    const incorrect = document.querySelectorAll('.wrong');\n    correct.className = 'correct_click';\n    incorrect.forEach((element) => {\n      element.className = 'wrong_click';\n    });\n  }\n\n  onClickNext = () => {\n    const { history } = this.props;\n    const LAST_QUESTION = 4;\n    const { answer } = this.state;\n    if (answer === LAST_QUESTION) {\n      const { score, name, gravatarEmail } = this.props;\n      setLocalStorage({ score, name, gravatarEmail });\n      history.push('/feedback');\n    } else {\n      this.countDown();\n      this.setState({ answer: answer + 1, disableQuestButton: false, timer: 30 });\n    }\n  }\n\n  countDown = () => {\n    const INTERVAL_TIME = 1000;\n    const intervalo = setInterval(() => {\n      this.setState((prevState) => {\n        if (prevState.timer === 0) {\n          this.onClickAnswer();\n          return { timer: 0 };\n        }\n        return { timer: prevState.timer - 1 };\n      });\n    }, INTERVAL_TIME);\n    this.setState({ intervalo });\n  }\n\n  nextButton = () => (\n    <button\n      className=\"game_next_btn\"\n      type=\"button\"\n      data-testid=\"btn-next\"\n      onClick={ this.onClickNext }\n    >\n      <BiSkipNextCircle />\n      <span className=\"game_next_btn_text\">Next</span>\n    </button>\n  )\n\n  render() {\n    const { answer, disableQuestButton, timer, questionsRandom } = this.state;\n    const { questions } = this.props;\n    const { category, question } = questions[answer];\n    const randomAnswer = questionsRandom[answer];\n    return (\n      <div className=\"game_wrapper\">\n        <div className=\"game_timer\">\n          <BiTimer className=\"timer_icon\" />\n          <span>{ `${timer} seconds` }</span>\n        </div>\n        <div className=\"game_box\">\n          <h1\n            className=\"game_category\"\n            data-testid=\"question-category\"\n          >\n            {category}\n          </h1>\n          <h2\n            data-testid=\"question-text\"\n          >\n            {sanitize(question)}\n          </h2>\n          <div\n            className=\"game_answer_btn\"\n            data-testid=\"answer-options\"\n          >\n            {questionsRandom.length !== 0\n          && randomAnswer.map(([currentQuestion, testId]) => (\n            <button\n              className={ testId.split('-')[0] }\n              key={ currentQuestion }\n              type=\"button\"\n              onClick={ () => this.onClickAnswer(testId) }\n              data-testid={ testId }\n              disabled={ disableQuestButton }\n            >\n              {sanitize(currentQuestion)}\n            </button>))}\n          </div>\n          <div className=\"next_btn\">\n            {disableQuestButton && this.nextButton() }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nGameBody.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = ({ player }) => ({\n  name: player.name,\n  score: player.score,\n  gravatarEmail: player.gravatarEmail,\n});\n\nexport default connect(mapStateToProps)(GameBody);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GameBody from '../components/GameBody';\nimport Header from '../components/Header';\n\nclass Game extends Component {\n  state = {\n    questions: [],\n\n  }\n\n  componentDidMount = async () => {\n    const { token } = this.props;\n    const getQuestion = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const { results } = await getQuestion.json();\n    if (results.length) this.setState({ questions: results });\n    else this.getNewFetch();\n  }\n\n  getNewFetch = async () => {\n    const getToken = await fetch('https://opentdb.com/api_token.php?command=request');\n    const { token } = await getToken.json();\n    const getQuestion = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const { results } = await getQuestion.json();\n    this.setState({ questions: results });\n  }\n\n  render() {\n    const { questions: { length } } = this.state;\n    return (\n      <div>\n        <Header />\n        { length !== 0 && <GameBody { ...this.state } { ...this.props } />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ token }) => ({ token });\n\nGame.propTypes = {\n  token: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps)(Game);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Ranking from './pages/Ranking';\nimport FeedBack from './pages/FeedBack';\nimport Game from './pages/Game';\n\nexport default function App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Route path=\"/ranking\" component={ Ranking } />\n        <Route path=\"/feedback\" component={ FeedBack } />\n        <Route path=\"/game\" component={ Game } />\n      </Switch>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_USER_INFO, CORRECT_ANSWER } from '../actions/action';\n\nconst INITIAL_STATE = {\n  name: 'Player',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: 'https://www.gravatar.com/avatar/5fe9e51e59db5ce1541c1902a9ee0ec3',\n};\n\nfunction player(state = INITIAL_STATE, { type, payload }) {\n  switch (type) {\n  case GET_USER_INFO:\n    return {\n      ...state,\n      ...payload,\n      score: 0,\n      assertions: 0,\n    };\n\n  case CORRECT_ANSWER:\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n      score: state.score + payload,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default player;\n","import { GET_TOKEN } from '../actions/action';\n\nconst INITIAL_STATE = 'teste';\n\nfunction token(state = INITIAL_STATE, { type, payload }) {\n  switch (type) {\n  case GET_TOKEN:\n    return payload;\n\n  default:\n    return state;\n  }\n}\n\nexport default token;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './token';\n\nconst rootReducers = combineReducers({ player, token });\n\nexport default rootReducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers/rootReducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\n// Laço Condicional para Cypress:\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";"],"sourceRoot":""}